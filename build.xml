<?xml version="1.0" encoding="utf-8"?>
<project name="ConditionalRestrictions" default="dist" basedir=".">

    <!-- enter the SVN commit message -->
    <property name="commit.message" value="JOSM plugin for conditional restrictions in GraphView"/>
    <!-- enter the *lowest* JOSM version this plugin is currently compatible with -->
    <property name="plugin.main.version" value="18000"/>
    
    <!-- Configure these properties (replace "..." accordingly).
         See https://josm.openstreetmap.de/wiki/DevelopersGuide/DevelopingPlugins
    -->
    <property name="plugin.author" value="CEF"/>
    <property name="plugin.class" value="org.openstreetmap.josm.plugins.conditionalrestrictions.ConditionalRestrictionsPlugin"/>
    <property name="plugin.description" value="Extends GraphView plugin to support conditional restrictions like time-based access rules"/>
    <property name="plugin.icon" value="images/conditional.png"/>
    <property name="plugin.link" value="https://github.com/yourusername/josm-conditional-restrictions-plugin"/>
    <property name="plugin.requires" value="graphview"/>
    
    <!-- ** include targets that all plugins have in common ** -->
    <import file="build-common.xml"/>
    
    <property name="josm" location="lib/josm-custom.jar"/>
    <property name="plugin.dist.dir" value="dist"/>
    
    <!-- classpath for compiling and testing -->
    <path id="classpath">
        <pathelement location="${josm}"/>
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
        <!-- GraphView dependency - optional for compilation -->
        <fileset dir="${plugin.dist.dir}" erroronmissingdir="false">
            <include name="graphview.jar"/>
        </fileset>
    </path>
    
    <target name="init">
        <mkdir dir="${plugin.build.dir}"/>
        <mkdir dir="dist"/>
    </target>
    
    <target name="compile" depends="init">
        <echo message="compiling sources for ${plugin.jar} ..."/>
        <javac srcdir="src" debug="true" destdir="${plugin.build.dir}" includeantruntime="false" 
               encoding="UTF-8" source="1.8" target="1.8">
            <classpath refid="classpath"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    
    <target name="dist" depends="compile,revision">
        <echo message="creating ${ant.project.name}.jar ..."/>
        <copy todir="${plugin.build.dir}/images">
            <fileset dir="images"/>
        </copy>
        <copy todir="${plugin.build.dir}/data">
            <fileset dir="data"/>
        </copy>
        <jar destfile="${plugin.jar}" basedir="${plugin.build.dir}" manifestencoding="UTF-8">
            <manifest>
                <attribute name="Author" value="${plugin.author}"/>
                <attribute name="Plugin-Class" value="${plugin.class}"/>
                <attribute name="Plugin-Date" value="${version.entry.commit.date}"/>
                <attribute name="Plugin-Description" value="${plugin.description}"/>
                <attribute name="Plugin-Icon" value="${plugin.icon}"/>
                <attribute name="Plugin-Link" value="${plugin.link}"/>
                <attribute name="Plugin-Mainversion" value="${plugin.main.version}"/>
                <attribute name="Plugin-Requires" value="${plugin.requires}"/>
                <attribute name="Plugin-Version" value="${version.entry.commit.revision}"/>
            </manifest>
        </jar>
    </target>
    
    
    <target name="install" depends="dist">
        <property environment="env"/>
        <condition property="josm.plugins.dir" value="${env.APPDATA}/JOSM/plugins">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        <condition property="josm.plugins.dir" value="${user.home}/Library/JOSM/plugins">
            <and>
                <os family="mac"/>
            </and>
        </condition>
        <property name="josm.plugins.dir" value="${user.home}/.josm/plugins"/>
        <copy file="${plugin.jar}" todir="${josm.plugins.dir}"/>
    </target>
    
    <!-- Test compilation and execution targets -->
    <property name="test.build.dir" value="build/test"/>
    <property name="test.reports.dir" value="test-reports"/>
    <property name="lib.junit" value="lib/junit-4.13.2.jar"/>
    <property name="lib.hamcrest" value="lib/hamcrest-core-1.3.jar"/>
    
    <!-- Download test dependencies if needed -->
    <target name="download-test-libs" unless="junit.available">
        <mkdir dir="lib"/>
        <get src="https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar" 
             dest="${lib.junit}" 
             skipexisting="true"/>
        <get src="https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar" 
             dest="${lib.hamcrest}" 
             skipexisting="true"/>
    </target>
    
    <!-- Check if test libraries are available -->
    <target name="check-test-libs">
        <available file="${lib.junit}" property="junit.available"/>
        <available file="${lib.hamcrest}" property="hamcrest.available"/>
        <condition property="test.libs.available">
            <and>
                <isset property="junit.available"/>
                <isset property="hamcrest.available"/>
            </and>
        </condition>
    </target>
    
    <!-- Extended classpath for testing -->
    <path id="test.classpath">
        <path refid="classpath"/>
        <pathelement location="${plugin.build.dir}"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${lib.hamcrest}"/>
        <pathelement location="${test.build.dir}"/>
    </path>
    
    <!-- Compile tests -->
    <target name="compile-test" depends="compile,check-test-libs,download-test-libs">
        <fail unless="test.libs.available" message="Test libraries not available. Run 'ant download-test-libs' first."/>
        
        <mkdir dir="${test.build.dir}"/>
        <echo message="compiling test sources for ${plugin.jar} ..."/>
        <javac srcdir="test" debug="true" destdir="${test.build.dir}" includeantruntime="false" 
               encoding="UTF-8" source="1.8" target="1.8">
            <classpath refid="test.classpath"/>
            <compilerarg value="-Xlint:deprecation"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>
    
    <!-- Run unit tests -->
    <target name="test" depends="compile-test">
        <mkdir dir="${test.reports.dir}"/>
        <echo message="running unit tests for ${plugin.jar} ..."/>
        
        <junit printsummary="yes" haltonfailure="no" haltonerror="no" fork="yes" forkmode="once">
            <classpath refid="test.classpath"/>
            
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            
            <!-- Run all test classes -->
            <batchtest todir="${test.reports.dir}">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        
        <!-- Generate HTML test report -->
        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}/html"/>
        </junitreport>
        
        <echo message="Test reports generated in ${test.reports.dir}/html/index.html"/>
    </target>
    
    <!-- Run specific test class -->
    <target name="test-single" depends="compile-test" description="Run a single test class">
        <fail unless="test.class" message="Specify test class with -Dtest.class=ClassName"/>
        
        <mkdir dir="${test.reports.dir}"/>
        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes" fork="yes">
            <classpath refid="test.classpath"/>
            <formatter type="plain" usefile="false"/>
            <test name="${test.class}"/>
        </junit>
    </target>
    
    <!-- Clean test artifacts -->
    <target name="clean-test">
        <delete dir="${test.build.dir}"/>
        <delete dir="${test.reports.dir}"/>
    </target>
    
    <!-- Enhanced clean target -->
    <target name="clean" depends="clean-test">
        <delete dir="${plugin.build.dir}"/>
        <delete file="${plugin.jar}"/>
    </target>
    
    <!-- Validation target to check plugin structure -->
    <target name="validate" depends="compile">
        <echo message="Validating plugin structure..."/>
        
        <!-- Check for required files -->
        <fail message="Plugin properties file missing">
            <condition>
                <not>
                    <available file="plugin.properties"/>
                </not>
            </condition>
        </fail>
        
        <!-- Check for main plugin class -->
        <fail message="Main plugin class not found">
            <condition>
                <not>
                    <available file="${plugin.build.dir}/org/openstreetmap/josm/plugins/conditionalrestrictions/ConditionalRestrictionsPlugin.class"/>
                </not>
            </condition>
        </fail>
        
        <echo message="Plugin structure validation passed"/>
    </target>
    
    <!-- Package source distribution -->
    <target name="dist-src" description="Create source distribution">
        <property name="src.dist.name" value="${ant.project.name}-src"/>
        <zip destfile="dist/${src.dist.name}.zip">
            <fileset dir=".">
                <include name="src/**"/>
                <include name="test/**"/>
                <include name="data/**"/>
                <include name="images/**"/>
                <include name="build.xml"/>
                <include name="plugin.properties"/>
                <include name="README.md"/>
            </fileset>
        </zip>
        <echo message="Source distribution created: dist/${src.dist.name}.zip"/>
    </target>
    
    <!-- Development convenience targets -->
    <target name="rebuild" depends="clean,dist" description="Clean rebuild"/>
    <target name="test-all" depends="clean,test" description="Clean build and run all tests"/>
    <target name="quick-test" depends="compile-test" description="Quick test run without clean"/>
    
    <!-- Help target -->
    <target name="help" description="Show available targets">
        <echo>Available targets:</echo>
        <echo>  compile      - Compile plugin sources</echo>
        <echo>  dist         - Build plugin JAR</echo>
        <echo>  install      - Install plugin to JOSM plugins directory</echo>
        <echo>  clean        - Clean build artifacts</echo>
        <echo>  test         - Run all unit tests</echo>
        <echo>  test-single  - Run single test (use -Dtest.class=ClassName)</echo>
        <echo>  validate     - Validate plugin structure</echo>
        <echo>  dist-src     - Create source distribution</echo>
        <echo>  rebuild      - Clean rebuild</echo>
        <echo>  test-all     - Clean build and test</echo>
        <echo>  help         - Show this help</echo>
        <echo></echo>
        <echo>Examples:</echo>
        <echo>  ant test-single -Dtest.class=ConditionalRestrictionParserTest</echo>
        <echo>  ant install</echo>
        <echo>  ant test-all</echo>
    </target>
    
</project>